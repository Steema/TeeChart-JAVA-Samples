/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StandardSeries.Lines;

import com.steema.teechart.Rectangle;
import com.steema.teechart.TChart;
import com.steema.teechart.drawing.Color;
import com.steema.teechart.drawing.IGraphics3D;
import com.steema.teechart.editors.ChartEditor;
import com.steema.teechart.events.ChartDrawEvent;
import com.steema.teechart.events.ChartPaintAdapter;
import com.steema.teechart.legend.LegendAlignment;
import com.steema.teechart.styles.Custom;
import com.steema.teechart.styles.Donut;
import com.steema.teechart.styles.Line;
import com.steema.teechart.styles.PointerStyle;
import com.steema.teechart.tools.Annotation;
import com.steema.teechart.tools.AnnotationPosition;
import com.steema.teechart.tools.CursorTool;
import com.steema.teechart.tools.CursorToolStyle;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/**
 *
 * @author norike
 */
public class WebAnalytics extends javax.swing.JPanel {

    /**
     * Creates new form WebAnalytics
     */
    public WebAnalytics() {
        initComponents();

        createCharts();
        initCharts();        
        setEditors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    protected TChart tChart1, tChart2, tChart3, tChart4;

    private void initChart1() {
        tChart1.getFooter().getFont().setColor(java.awt.Color.GRAY);
        tChart1.getFooter().getFont().setSize(28);
        tChart1.getFooter().getFont().setName("Tahoma");
        tChart1.getFooter().setText("Expenses");
        tChart1.getHeader().setVisible(false);
        tChart1.getLegend().setVisible(false);
        tChart1.getAspect().setView3D(false);
        tChart1.getPanel().getGradient().setVisible(false);
        tChart1.getPanel().setColor(Color.WHITE);
        tChart1.getWalls().getBack().setVisible(false);
        
        Donut donut1 = new Donut(tChart1.getChart());
        donut1.getMarks().setVisible(false);
        donut1.getShadow().setVisible(false);
        donut1.getOtherSlice().getLegend().setVisible(false);
        donut1.getPen().setVisible(false);
        donut1.setRotationAngle(180);
        donut1.setDonutPercent(95);
        donut1.add(750);
        donut1.add(250, Color.WHITE);
        donut1.setCircled(true);
        
        Annotation annotation1 = new Annotation(tChart1.getChart());
        annotation1.setPosition(AnnotationPosition.CENTER);
        annotation1.getShape().getFont().setSize(39);
        annotation1.getShape().getFont().setName("Segoe UI");
        annotation1.getShape().setText("$750");
        annotation1.getShape().setTransparent(true);
    }

    private void initChart2() {
        tChart2.getFooter().getFont().setColor(java.awt.Color.GRAY);
        tChart2.getFooter().getFont().setSize(28);
        tChart2.getFooter().getFont().setName("Tahoma");
        tChart2.getFooter().setText("Visitors");
        tChart2.getHeader().setVisible(false);
        tChart2.getLegend().setVisible(false);
        tChart2.getAspect().setView3D(false);
        tChart2.getPanel().getGradient().setVisible(false);
        tChart2.getPanel().setColor(Color.WHITE);
        tChart2.getWalls().getBack().setVisible(false);
        
        Donut donut1 = new Donut(tChart2.getChart());
        donut1.getMarks().setVisible(false);
        donut1.getShadow().setVisible(false);
        donut1.getOtherSlice().getLegend().setVisible(false);
        donut1.getPen().setVisible(false);
        donut1.setRotationAngle(247);
        donut1.setDonutPercent(95);
        donut1.add(3390, Color.fromArgb(6, 191, 89));
        donut1.add(2610, Color.WHITE);
        donut1.setCircled(true);
        
        Annotation annotation1 = new Annotation(tChart2.getChart());
        annotation1.setPosition(AnnotationPosition.CENTER);
        annotation1.getShape().getFont().setSize(39);
        annotation1.getShape().getFont().setName("Segoe UI");
        annotation1.getShape().setText("3390");
        annotation1.getShape().setTransparent(true);
    }

    private void initChart3() {
        tChart3.getFooter().getFont().setColor(java.awt.Color.GRAY);
        tChart3.getFooter().getFont().setSize(28);
        tChart3.getFooter().getFont().setName("Tahoma");
        tChart3.getFooter().setText("Earnings");
        tChart3.getHeader().setVisible(false);
        tChart3.getLegend().setVisible(false);
        tChart3.getAspect().setView3D(false);
        tChart3.getPanel().getGradient().setVisible(false);
        tChart3.getPanel().setColor(Color.WHITE);
        tChart3.getWalls().getBack().setVisible(false);
        
        Donut donut1 = new Donut(tChart3.getChart());
        donut1.getMarks().setVisible(false);
        donut1.getShadow().setVisible(false);
        donut1.getOtherSlice().getLegend().setVisible(false);
        donut1.getPen().setVisible(false);
        donut1.setRotationAngle(180);
        donut1.setDonutPercent(95);
        donut1.add(1500, Color.fromArgb(238, 17, 34));
        donut1.add(500, Color.WHITE);
        donut1.setCircled(true);
        
        Annotation annotation1 = new Annotation(tChart3.getChart());
        annotation1.setPosition(AnnotationPosition.CENTER);
        annotation1.getShape().getFont().setSize(39);
        annotation1.getShape().getFont().setName("Segoe UI");
        annotation1.getShape().setText("$1500");
        annotation1.getShape().setTransparent(true);
    }

    private final static NumberFormat formatter = new DecimalFormat("0.00");
    private double xval;

    private void initChart4() {
        
        Annotation annotation1, annotation2, annotation3;
        
        tChart4.getLegend().setAlignment(LegendAlignment.BOTTOM);
        tChart4.getLegend().getFont().setName("Verdana");
        tChart4.getLegend().getShadow().setTransparency(0);
        tChart4.getLegend().setTransparent(true);
        tChart4.getHeader().setVisible(false);
        tChart4.getAxes().getLeft().getGrid().setVisible(false);
        tChart4.getAxes().getLeft().getMinorTicks().setVisible(false);
        tChart4.getAxes().getLeft().getLabels().setSeparation(100);
        tChart4.getAxes().getBottom().getMinorTicks().setVisible(false);
        tChart4.getAspect().setView3D(false);
        tChart4.getPanel().getGradient().setVisible(false);
        tChart4.getPanel().setColor(Color.WHITE);
        tChart4.getWalls().getBack().setVisible(false);

        Line line1 = new Line(tChart4.getChart());
        line1.setTitle("Speed");
        line1.setSmoothed(true);
        line1.getPointer().setInflateMargins(true);
        line1.getPointer().getPen().setVisible(false);
        line1.getPointer().setStyle(PointerStyle.CIRCLE);
        line1.getPointer().setVisible(true);
        line1.fillSampleValues(6);

        Line line2 = new Line(tChart4.getChart());
        line2.setColor(Color.fromArgb(6, 191, 89));
        line2.setTitle("Time");
        line2.setSmoothed(true);
        line2.getPointer().setInflateMargins(true);
        line2.getPointer().getPen().setVisible(false);
        line2.getPointer().setStyle(PointerStyle.CIRCLE);
        line2.getPointer().setVisible(true);
        line2.fillSampleValues(6);

        Line line3 = new Line(tChart4.getChart());
        line3.setColor(Color.fromArgb(238, 17, 34));
        line3.setTitle("Visitors");
        line3.setSmoothed(true);
        line3.getPointer().setInflateMargins(true);
        line3.getPointer().getPen().setVisible(false);
        line3.getPointer().setStyle(PointerStyle.CIRCLE);
        line3.getPointer().setVisible(true);
        line3.fillSampleValues(6);

        CursorTool cursorTool1 = new CursorTool(tChart4.getChart());
        cursorTool1.setFollowMouse(true);
        cursorTool1.getPen().setColor(Color.GRAY);
        cursorTool1.setStyle(CursorToolStyle.VERTICAL);

        annotation1 = new Annotation(tChart4.getChart());
        annotation1.getShape().setVisible(false);
        annotation1.getShape().setCustomPosition(true);
        annotation1.getShape().getFont().setColor(line1.getColor());

        annotation2 = new Annotation(tChart4.getChart());
        annotation2.getShape().setVisible(false);
        annotation2.getShape().setCustomPosition(true);
        annotation2.getShape().getFont().setColor(line2.getColor());

        annotation3 = new Annotation(tChart4.getChart());
        annotation3.getShape().setVisible(false);
        annotation3.getShape().setCustomPosition(true);
        annotation3.getShape().getFont().setColor(line3.getColor());

        cursorTool1.addCursorListener(new CursorTool.CursorListener() {

            @Override
            public void cursorMoved(CursorTool.CursorEvent e) {
                xval = e.getXValue();

                annotation1.setText(formatter.format(InterpolateLineSeries((Custom) tChart4.getSeries(1), e.getXValue())));
                annotation1.setLeft(e.getPoint().x + 5);
                annotation1.setTop(tChart4.getAxes().getLeft().iStartPos);

                annotation2.setText(formatter.format(InterpolateLineSeries((Custom) tChart4.getSeries(3), e.getXValue())));
                annotation2.setLeft(e.getPoint().x + 5);
                annotation2.setTop(tChart4.getAxes().getLeft().iStartPos + 18);

                annotation3.setText(formatter.format(InterpolateLineSeries((Custom) tChart4.getSeries(5), e.getXValue())));
                annotation3.setLeft(e.getPoint().x + 5);
                annotation3.setTop(tChart4.getAxes().getLeft().iStartPos + 36);
            }
        });

        tChart4.addChartPaintListener(new ChartPaintAdapter() {
            @Override
            public void chartPainted(ChartDrawEvent pce) {
                IGraphics3D g = tChart4.getGraphics3D();
                int xs = tChart4.getAxes().getBottom().calcXPosValue(xval);
                int ys;

                g.getBrush().setVisible(true);
                g.getBrush().setSolid(true);
                g.getPen().setVisible(false);

                for (int i = 0; i < tChart4.getSeriesCount(); i++) {
                    if ((tChart4.getSeries(i) instanceof Custom) && (tChart4.getSeries(i).InternalUse)) {
                        ys = tChart4.getSeries(i).getVertAxis().calcYPosValue(InterpolateLineSeries((Custom) tChart4.getSeries(i), xval));

                        g.getBrush().setColor(tChart4.getSeries(i).getColor());
                        g.ellipse(new Rectangle(xs - 4, ys - 4, 8, 8));
                    }
                }
            }
        ;});
    }
    
    private double InterpolateLineSeries(com.steema.teechart.styles.Custom series, double xvalue) {
        return InterpolateLineSeries(series, series.getFirstVisible(), series.getLastVisible(), xvalue);
    }

    private double InterpolateLineSeries(com.steema.teechart.styles.Custom series, int firstindex, int lastindex, double xvalue) {
        int index;

        for (index = firstindex; index <= lastindex; index++) {
            if ((index == -1) || (series.getXValues().getValue(index) > xvalue)) {
                break;
            }
        }

        // safeguard
        if (index < 1) {
            index = 1;
        } else if (index >= series.getCount()) {
            index = series.getCount() - 1;
        }

        // y=(y2-y1)/(x2-x1)*(x-x1)+y1        
        double dx = series.getXValues().getValue(index) - series.getXValues().getValue(index - 1);
        double dy = series.getYValues().getValue(index) - series.getYValues().getValue(index - 1);
        if (dx != 0.0) {
            return dy * (xvalue - series.getXValues().getValue(index - 1)) / dx + series.getYValues().getValue(index - 1);
        } else {
            return 0.0;
        }
    }

    private void createCharts() {
        tChart1 = new com.steema.teechart.TChart();
        tChart2 = new com.steema.teechart.TChart();
        tChart3 = new com.steema.teechart.TChart();
        tChart4 = new com.steema.teechart.TChart();

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(2,2,2,2);
        c.weightx = 1;
        c.weighty = 0.6;
        c.gridy = 0;
        
        c.gridx = 0;
        add(tChart1, c);

        c.gridx = 1;
        add(tChart2, c);

        c.gridx = 2;
        add(tChart3, c);

        c.gridwidth = 3;
        c.weighty = 1;
        c.gridx = 0;
        c.gridy = 1;
        add(tChart4, c);
    }

    private void initCharts() {
        initChart1();
        initChart2();
        initChart3();
        initChart4();
    }

    private void setEditors() {
        setEditor(tChart1);
        setEditor(tChart2);
        setEditor(tChart3);
        setEditor(tChart4);
    }

    private void setEditor(TChart chart) {
        chart.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                 if (e.getClickCount()==2) {
                    ChartEditor.editChart(chart.getChart());
                }
            }
        });
    }
}
