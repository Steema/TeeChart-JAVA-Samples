/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StandardSeries.Points;

import com.steema.teechart.DateTime;
import com.steema.teechart.TChart;
import com.steema.teechart.drawing.Color;
import com.steema.teechart.drawing.StringAlignment;
import com.steema.teechart.editors.ChartEditor;
import com.steema.teechart.events.SeriesMouseAdapter;
import com.steema.teechart.events.SeriesMouseEvent;
import com.steema.teechart.functions.Average;
import com.steema.teechart.legend.Legend;
import com.steema.teechart.legend.LegendAdapter;
import com.steema.teechart.legend.LegendItemCoordinates;
import com.steema.teechart.styles.Line;
import com.steema.teechart.styles.PointerStyle;
import com.steema.teechart.styles.Points;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

/**
 *
 * @author norike
 */
public class ProductShipments extends javax.swing.JPanel {

    /**
     * Creates new form ProductShipments
     */
    public ProductShipments() {
        initComponents();

        createChart();
        initChart();
        setEditor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    protected TChart tChart1;

    private void createChart() {
        tChart1 = new TChart();
        add(tChart1);
    }

    private Points seriesEntered = null;

    private void initChart() {
        tChart1.getPanel().getGradient().setVisible(false);
        tChart1.getPanel().setColor(Color.WHITE);
        tChart1.getWalls().setVisible(false);
        tChart1.getSubHeader().getFont().setSize(13);
        tChart1.getSubHeader().setAlignment(StringAlignment.NEAR);
        tChart1.getSubHeader().setText("Tons fortnightly, all freighted sources");
        tChart1.getHeader().setAlignment(StringAlignment.NEAR);
        tChart1.getHeader().getFont().setColor(Color.GRAY);
        tChart1.getHeader().getFont().setSize(21);
        tChart1.getHeader().getFont().setName("Verdana");
        tChart1.getHeader().getFont().getShadow().setColor(Color.LIGHT_GRAY);
        tChart1.getHeader().getFont().getShadow().setHorizSize(1);
        tChart1.getHeader().getFont().getShadow().setSmoothBlur(2);
        tChart1.getHeader().getFont().getShadow().setVertSize(1);
        tChart1.getHeader().getFont().getShadow().setVisible(true);
        tChart1.getHeader().setText("Product shipments");
        tChart1.getAxes().getBottom().getAxisPen().setVisible(false);
        tChart1.getAxes().getBottom().getGrid().setVisible(false);
        tChart1.getAxes().getBottom().getLabels().getFont().setColor(Color.GRAY);
        tChart1.getAxes().getBottom().getLabels().getFont().setSize(24);
        tChart1.getAxes().getBottom().getLabels().getFont().setName("Verdana");
        tChart1.getAxes().getBottom().getMinorTicks().setVisible(false);
        tChart1.getAxes().getBottom().getTicks().setTransparency(100);
        tChart1.getAxes().getBottom().getTicksInner().setVisible(false);
        tChart1.getAxes().getLeft().getAxisPen().setVisible(false);
        tChart1.getAxes().getLeft().getGrid().setColor(new Color(169, 169, 169));
        tChart1.getAxes().getLeft().getLabels().getFont().setColor(Color.GRAY);
        tChart1.getAxes().getLeft().getLabels().getFont().setSize(24);
        tChart1.getAxes().getLeft().getLabels().getFont().setName("Verdana");
        tChart1.getAxes().getLeft().setMinimumOffset(10);
        tChart1.getAxes().getLeft().getMinorTicks().setVisible(false);
        tChart1.getAxes().getLeft().getTicks().setLength(7);
        tChart1.getAxes().getLeft().getTicks().setTransparency(100);
        tChart1.getAxes().getLeft().getTicksInner().setVisible(false);
        tChart1.getLegend().getFont().setSize(19);
        tChart1.getLegend().getFont().setName("Verdana");
        tChart1.getLegend().getPen().setVisible(false);
        tChart1.getLegend().getShadow().setVisible(false);
        tChart1.getLegend().getSymbol().getPen().setVisible(false);
        tChart1.getAspect().setView3D(false);

        Points points1 = new Points(tChart1.getChart());
        points1.setColor(new Color(255, 153, 102));
        points1.setTitle("Apples");

        Points points2 = new Points(tChart1.getChart());
        points2.setColor(new Color(255, 153, 102));
        points2.setTitle("Pears");

        Line line1 = new Line(tChart1.getChart());
        line1.setColor(new Color(0, 128, 192));
        line1.setTitle("Average");
        line1.getLinePen().setWidth(2);

        int[] Yarr1 = new int[]{5, 3, 2, 7, 1, 6, 4, 5, 1, 0, 10, 7, 11, 15, 12,
            21, 17, 15, 19, 24, 21, 11, 15, 21, 19, 17, 20, 23};
        int[] Yarr2 = new int[]{7, 1, 5, 1, 0, 10, 6, 3, 2, 7, 11, 4, 5, 3, 4,
            5, 1, 5, 11, 15, 16, 14, 14, 13, 12, 15, 17, 19};

        DateTime[] Xarr = new DateTime[]{new DateTime(2012, 9, 1),
            new DateTime(2012, 9, 15), new DateTime(2012, 10, 1),
            new DateTime(2012, 10, 15), new DateTime(2012, 11, 1),
            new DateTime(2012, 11, 15), new DateTime(2012, 12, 1),
            new DateTime(2012, 12, 15), new DateTime(2013, 1, 1),
            new DateTime(2013, 1, 15), new DateTime(2013, 2, 1),
            new DateTime(2013, 2, 15), new DateTime(2013, 3, 1),
            new DateTime(2013, 3, 15), new DateTime(2013, 4, 1),
            new DateTime(2013, 4, 15), new DateTime(2013, 5, 1),
            new DateTime(2013, 5, 15), new DateTime(2013, 6, 1),
            new DateTime(2013, 6, 15), new DateTime(2013, 7, 1),
            new DateTime(2013, 7, 15), new DateTime(2013, 8, 1),
            new DateTime(2013, 8, 15), new DateTime(2013, 9, 1),
            new DateTime(2013, 9, 15), new DateTime(2013, 10, 1),
            new DateTime(2013, 10, 15)};

        points1.getXValues().setDateTime(true);
        points2.getXValues().setDateTime(true);

        for (int i = 0; i < Xarr.length; i++) {
            points1.add(Xarr[i], Yarr1[i]);
            points2.add(Xarr[i], Yarr2[i]);
        }

        points1.getPointer().setStyle(PointerStyle.CIRCLE);
        points2.getPointer().setStyle(PointerStyle.CIRCLE);
        points1.getPointer().getPen().setVisible(false);
        points2.getPointer().getPen().setVisible(false);

        ArrayList sources = new ArrayList();
        sources.add(points1);
        sources.add(points2);

        Average averageFunc = new Average();
        line1.setFunction(averageFunc);
        averageFunc.addPoints(sources);

        line1.setSmoothed(true);

        SeriesMouseAdapter pointsAdapter = new SeriesMouseAdapter() {

            @Override
            public void seriesEntered(SeriesMouseEvent e) {
                Points points = (Points) e.getSeries();
                points.getPointer().setHorizSize(2);
                points.getPointer().setVertSize(2);
                seriesEntered = points;
            }

            @Override
            public void seriesExited(SeriesMouseEvent e) {
                Points points = (Points) e.getSeries();
                points.getPointer().setHorizSize(4);
                points.getPointer().setVertSize(4);
                seriesEntered = null;
            }
        };

        points1.addSeriesMouseListener(pointsAdapter);
        points2.addSeriesMouseListener(pointsAdapter);

        tChart1.setLegendResolver(new LegendAdapter() {

            @Override
            public LegendItemCoordinates getItemCoordinates(Legend legend, LegendItemCoordinates coordinates) {
                legend.getChart().getGraphics3D().getFont().setBold(false);
                int index = coordinates.getIndex();

                if ((index > -1) && (seriesEntered == tChart1.getSeries(index))) {
                    legend.getChart().getGraphics3D().getFont().setBold(true);
                }

                return coordinates;
            }
        });

    }

    private void setEditor() {
        tChart1.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    ChartEditor.editChart(tChart1.getChart());
                }
            }
        });
    }
}
